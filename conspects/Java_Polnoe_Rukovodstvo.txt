СОДЕРЖАНИЕ ПО СТРОКАМ

История и развитие Java          - 50
Краткий обзор Java               - 130
Типы данных, переменые и массивы - 180
Операции                         - 237











































ИСТОРИЯ И РАЗВИТИЕ JAVA

Язык С созданный в вначале 70-х решил много вопросов, но по прежнему придерживался структурного подходу в программировании (методология, которая позволяет писать программу как набор блоков. Такими блоками являются ветвления, циклы, последовательность операторов, процедуры). Таким образом, хоть С и является одним из лучших ЯП, существует предел его способности справлятьсясо сложностью программ.

С++ был изобретен в 1979, он расширяет возможности С, добавляя в него объектно-ориентированные свойства.

ООП - это методика программирования, которая помогает организовывать сложные программы, применяя принципы наследованя, инкапсуляции и полиморфизма.

1991 г. Дж.Гослинг, П.Нотон, К.Уарт, Э.Франк и М.Шеридан начинают работу над созданием языка Oak, а в 1995 г. он переименован в Java. Цель создания: создание с его помощью ПО встраиваемого в различные бытовые электронные усторойства, для этого ЯП не должен зависеть от какой-то конкретной платформы, процессора и среды. В то же время формируется Web, что еще больше подтолкнуло развитие Java, потому что к Интернету подключены разнотипные платформы, и пользователям желательно, чтобы на всех этих платформах можно было выполнять одинаковые программы. Таким образом постепенно внимание разработчиков Java перешло с бытовой электроники на программирование для Интернета. 

Синтаксис Java был унаследован от C, а объектно-ориентированные свойства от C++. Java углубил и усовершенствовал ООП использованный в С++, добавил в него поддержку многопоточной обработки и предоставил библиотеку,которая упростила доступ в Интернет. Java обусловил появление нового типа прикладных программ, предназначенных для работы в сети -Аплетов.

Аплет - это особый вид прикладной программы на Java, предназначенный для передачи через Интернет и автоматического выполнения в совместимом с Java веб-браузере. Аплеты создаются в виде небольших программ. Как правило, они служат для отображения данных, предоставляемых сервером, обработки действий пользователя или выполнения локально, а не на сервере, таких простых функций, как вычисление процентов по кредитам. По существу, аплет позволяет перенести ряд функций со стороны сервера на сторону клиента.
Со временем аплеты потеряли свое значение, поскольку им на смену пришли другие механизмы доставки динамических, активных программ через Интернет. 

Java ограничивает действие аплета исполняющей средой Java, не предоставляя ему доступ к другим частям операционной системы компьютера. Возможность загружать аплеты в полной уверенности, что это не нанесет системе никакого вреда и не нарушит ее безопасность, многие специалисты и пользователи считают наиболее новаторским аспектом Java. 

Основная особенность Java, которая позволяет решать описанные выше проблемы обеспечения безопасности и переносимости программ, состоит в том, что компилятор Java выдает не исполняемый код, а так называемый байт-код - в высшей степени оптимизированный набор инструкций, предназначенных для выполнения в исполняющей системе Java, называемой виртуальной машиной Java (JVM). Собственно говоря, первоначальная версия JVM разрабатывалась в качестве интерпретатора байт-кода.
Все виртуальные машины JVM на разных платформах, несмотря на некоторые отличия и особенности их реализации, способны правильно интерпретировать один и тот же байт-код. Виртуальная машина JVM управляет выполнением программы, поэтому она может изолировать программу, чтобы создать ограниченную исполняющую среду, которая называется "песочничей" и содержит программу, препятствующую неограниченному доступу к машине. Когда программа компилируется в промежуточную форму, а затем интерпретируется виртуальной машиной JVM, она выполняется медленнее, чем если бы она была скомпилирована в исполняемый код. Но в Java это отличие в производительности не слишком заметно. Байт-код существенно оптимизирован, и поэтому его применение позволяет виртуальной машине JVM выполнять программы значительно быстрее, чем следовало ожидать.

JVM - содержит динамический компилятор, который оперативно компилирует байт-код в машинозависимый код.
JRE - программное обеспечение которое содержит JVM и основные библиотеки Java. JRE должен быть установлен на машине где запускаются
приложения написанные на Java
JDK - набор программ для разработки на Java. Включает в себя JRE, загрузчик кода java, компилятор javac, архиватор jar, генератор 
документации javadoc и другие утилиты, нужные во время разработки.

Аплеты решали лишь половину задачи в архитектуре "клиент-сервер': Вскоре после появления языка Java стало очевидно, что он может пригодиться и на серверах. В результате появились сервлеты. Сервлет - это небольшая прикладная программа, выполняемая на сервере.

Надежность.

Для обеспечения надежности в Java налагается ряд ограничений в нескольких наиболее важных областях, что вынуждает программистов выявлять ошибки на ранних этапах разработки программы. Поскольку Java - строго типизированный язык, то проверка кода выполняется во время компиляции. Но проверка кода делается и во время выполнения. В результате многие трудно обнаруживаемые программные ошибки,которые часто приводят к возникновению с трудом воспроизводимых ситуаций во время выполнения, попросту невозможны в программе на Java.

Предсказуемость кода в разных ситуациях - одна из основных особенностей Java.  Чтобы понять, каким образом достигается надежность программ на Java, рассмотрим две основные причины программных сбоев: ошибки управления памятью и неправильная обработка исключений (т.е. ошибки при выполнении). В традиционных средах создания программ управление памятью - сложная и трудоемкая задача. Java полностью исключает такие ситуации, автоматически управляя резервированием и освобождением памяти.

Распределенность
Язык Java предназначен для распределенной среды Интернета, поскольку он поддерживает семейство сетевых протоколов TCP/IP. По существу, обращение к ресурсу по унифицированному указателю информационного ресурса (URL) мало чем отличается от обращения к файлу. В языке Java поддерживается также удаленный вызов методов (Remote Method Invocation - RMI). Такая возможность позволяет вызывать методы из программ через сеть. 

Эволюция Java(основное):

Java 1 (1996г., 211 классов) 
За основу языка Java был взят язык C++, который очень сильно упростили и стандартизировали. Если в C++ что-то можно было  сделать десятью способами, то в Java оставили только один. Чем-то это было похоже на переход от иероглифов к алфавиту.

Java 2 (1998г., 1524 класса) 
1.Ключевое слово strictfp
2.Библиотека Swing для работы с графикой
3.JIT-компилятор, который ускорял работу Java-программ
4.Большой набор коллекций
5.Полная поддержка Unicode: японский, китайский и корейский языки.

Java 5 (2004г., 3279 классов) 
1.Аннотации
2.Дженерики 
3.Autoboxing/Unboxing
4.Цикл foreach
5.Enum (enumeration).

Java 6 (2006г., 3279 классов) 
1.Java Compiler API позволил вызывать Java-компилятор прямо из кода
2.JavaScript стало возможным выполнять прямо внутри программы на Java.

Java 7 (2011г., 4024 класса)
1.New Input Output API - новая библиотека для работы с вводом и выводом данных
2.Автоматическое выведение типов компилятором

Java 8 (2014г., 4240 класса)
1.Лямбда-выражения
2.Функциональные интерфейсы: аннотация @FunctionalInterface
3.Stream (потоки) для коллекций
4.Новое API для работы с датой и временем — Date Time API.

Java 9 (2017г., 6,005 классов)
1.С этого момента разработчики Java решили выпускать новые версии чаще — каждые полгода.
2.Возможность разделять программу на модули.

Java 11 (2018г., 4,411 классов)
1. Добавлена поддержка Unicode 10 (в который были добавдены эмодзи)
2. Появилось ключевое слово var
3. Разработчики Java исключили из JDK 11 такие библиотеки как JavaFX, Java EE и CORBA.
--------------------------------------------------------------------------------------

КРАТКИЙ ОБЗОР JAVA

ООП
Все программы состоят из 2х элементов: кода и данных, и могут в бОльшей степени ориентироваться либо на одно, либо на другое. Либо код воздействует на данные (процедурное), либо данные на код (ООП)
Класс - логическая конструкция
Объект (экземпляр класса) - физическое воплощение данной конструкции
Иерархическая классификация

АБСТРАКЦИЯ
-игнорирование лишних подробностей и деталей, рассмотрение объекта как единое целое.

ИНКАПСУЛЯЦИЯ
-связывает вместе код и обрабатываемые им данные, а также защищает их от внешнего вмешательства и неправильного использования, предотвращая произвольный доступ к данным. 
!Пример: коробка передач автомобиля, который дает четки интерфейс в виде рычага, он скрывает внутреннее устройство кп, воздействия на рычаг также не влияют на другие системы автомобиля. Т.о. коробка передач инкапсулирована.

Инкапсуляция переменных и методов класса реализуется через модификаторы доступа

НАСЛЕДОВАНИЕ
-процесс посредством которого объект приобретает свойства другого объекта.В отсутствие наследования каждый объект должен был бы явно определять все свои характеристики. Используя наследование, объекту нужно определить только те качества, которые делают его уникальным внутри своего класса.
Новый подкласс наследует все характерные признаки всех своих предков.

ПОЛИМОРФИЗМ
-представляет собой средство, которое позволяет использовать один интерфейс для общего класса действий.
Как правило, концепция полиморфизма часто выражается фразой "один интерфейс, несколько методов': Это означает возможность разработки общеrо интерфейса для rруппы связанных действий, что поможет уменьшить сложность, позволив использовать один и тот же интерфейс для указания общего класса действий. Задачей компилятора будет выбор конкретноrо действия (т.е. метода) применительно к каждой ситуации. Вам, как проrраммисту, не придется делать такой выбор вручную. Вам понадобится только запомнить и задействовать общий интерфейс. 

КОД
В Java весь код должен находиться внутри класса. По соглашению имя главного класса должно совпадать с именем файла, содержащего программу.

main () - это стартовая точка для вашей программы. Метод main ( ) вызывается при запуске приложения Java. Важно понимать, что компилятор Java будет компилировать классы, не содержащие метода main ( ) . Но у java не будет возможности запускать такие классы. 

В main () всего один параметр, хоть и сложный. Конструкция String[] args объявляет параметр по имени args, который представляет собой массив экземпляров класса String. (Массивы - это совокупности похожих объектов.) Объекты типа String хранят строки символов. В данном случае args получает любые аргументы командной строки, присутствующие при выполнении программы. В рассматриваемой программе такая информация не используется, но другие программы, показанные далее в этой книге, будут ее потреблять. 

ПЕРЕМЕННЫЕ
Переменная представляет собой именованную ячейку памяти, которой ваша программа может присвоить значение. Значение переменной можно изменять во время выполнения программы.

СИВОЛЫ РАЗДЕЛИТЕЛИ
() Круглые скобки - Применяется для указания списков параметров в определениях и вызовах методов. Кроме того, используется для определения порядка выполнения операций в обычных выражениях, выражениях внутри управляющих операторов и при приведении типов.
{} Фигурные скобки - Применяется для указания значений автоматически инициализируемых массивов. Также используется для определения блоков кода, классов, методов и локальных областей действия.
[] Квадратные скобки - Применяется для объявления типов массивов. Кроме того, используется для разыменования значений массива.
; Точка с запятой - Завершает операторы.
, Запятая - Отделяет последовательно следующие друг за другом идентификаторы при объявлении переменных. Также применяется для объединения операторов внутри for.
. Точка - Используется для отделения имен пакетов от имен подпакетов и классов. Кроме того, применяется для отделения имени переменной или метода от имени ссылочной переменной.
:: Двоеточия - Используется для создания ссылки на метод или конструктор.
... Троеточие - Указывает параметр с переменным колличеством аргументовю
@ - Начинает аннотацию

БИБЛИОТЕКИ КЛАССОВ JAVA
Java опирается на несколько встроенных библиотек лассов, которые содержат множество встроенных методов, обеспечивающих поддержку таких средств, как ввод-вывод, обработка строк, работа с сетью и графика. Стандартные классы также обеспечивают поддержк у графического пользовательского интерфейса.
---------------------------------------------------------------------------------------

ТИПЫ ДАННЫХ, ПЕРЕМЕННЫЕ, МАССИВЫ

Java - строго типизированный язык:
-у каждого выражения и переменной есть тип и он строго определен
-все присваивания как явные так и через передачу в параметры метода проверяются на совместимость типов

8 примитивных типов данных в Java (byte,short,int,long,char,float,double,boolean)
ПТД не объектно-ориентированны, их превращение в объекты слишком сильно снизило бы продуктивность

Литералы — это явно заданные значения в коде программы — константы определенного типа, которые находятся в коде в момент запуска.

В соответствии с примитивами, литералы также делятся на разделы:
Числовые:
Целочисленные;
С плавающей точкой;
Строковые;
Символьные;
Логические.

Переменные
-В Java все переменные должны быть объявлены до того, как их можно будет использовать. 
-Область видимости переменной опрелеляется блоком {}, также в область видимости входят параметры метода.

Преобразование и приведение типов
Автоматическое преобразование(2 типа совместимы, целевой тип больше исходного)
Явное преобразование(приведение несовметимых типов)
Правила повышения типов

Массивы
Массив - это группа переменных одного типа, к которой можно обращаться по общему имени. Можно создавать массивы любого типа с однимили большим количеством измерений. Доступ к определенному элементу массива осуществляется по его индексу. Массивы предлагают удобные средства группирования связанной информации. 

Объявление массива - двухэтапный процесс. Вопервых, вы обязаны объявить переменную нужного типа массива. Во-вторых,вы должны выделить память, в которой будет храниться массив, с применением операции new и назначить ее переменной типа массива. Таким образом, в Java все массивы размещаются в памяти динамически. 
new - это специальная операция, которая выделяет память. 

После размещения массива вы можете получать доступ к определенному элементу массива, указывая его индекс в квадратных скобках.
month_days [l] = 28; 

Многомерные массивы в Java реализованы как массивы массивов.
int[][] twoD = new int[4][5] ;

Ступенчатые (или нерегулярные) многомерные массивы могут оказаться неподходящими для многих приложений, потому что они противоречат тому, что люди ожидают найти при встрече с многомерным массивом. Однако в некоторых ситуациях нереrулярные массивы можно эффективно использовать. Скажем, если вам нужен очень большой разреженный двумерный массив (т.е.такой, rде задействованы не все элементы), тогда нерегулярный массив может стать идеальным решением.

Альтернативный синтаксис объявления массива
int a1[] = new int[3];
int[] а2 = new int[3]; 
Эта альтернативная форма объявления обеспечивает удобство при преобразовании кода из С/С++ в Java

Выведение типов локальных переменных
-var
-появилось в Java 11
-способно упрощать объявления в случаях, когда имя типа имеет довольно большую длину, как у некоторых имен классов
-можно применять для объявления массивов, var myArray = new int[1O];
-var может использоваться для объявления переменной только тогда, когда эта переменная инициализирована
-var можно применять только для объявления локальных переменных. Его нельзя использовать, например, при объявлении переменных экземпляра, параметров или возвращаемых типов
-можно объявлять только одну переменную за раз, для переменной нельзя использовать null в качестве инициализатора и объявляемая переменная не может присутствовать в выражении инициализатора
-----------------------------------------------------------------------------------------------------

ОПЕРАЦИИ
